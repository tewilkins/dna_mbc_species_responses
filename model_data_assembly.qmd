---
title: "Model data assembly for morhpological dataset (129 sites)"
format: docx
editor: visual
---

```{r setup}
#| echo: false
#| message: false
#| warning: false

requiredPackages <- c("readxl","tidyverse", "DBI")
lapply(requiredPackages, FUN = require, character.only = TRUE)
#  source("https://tools.thewerg.unimelb.edu.au/documents/misc/bugDatabaseFunctions.R")
## CW says: This is the more up-to-date bug database functions that you should use.
source("https://tools.thewerg.unimelb.edu.au/data/mwbugs/bug_database_functions.R")
source("https://tools.thewerg.unimelb.edu.au/data/mwstr_v13/mwstr_network_functions.R")
wd <- "~/uomShare/wergStaff/tewilkins/morph_taxa_129_sites/data/"
```

## Introduction

This document records the preparation of input data for Bayesian analysis macroinvertebrate assemblage composition in 129 sites across the Melbourne region, sampled in Spring 2021.

### Environmental predictors

Compared to the Spring 2018 data, the Spring 2021 dataset has a greater number of sites included for which environmental data is available. This allows us to construct models from a larger set of environmental predictors than the Spring 2018 data. As a starting point, a rule of approximately 10 independent observations to each predictor is recommended to avoid overfitting \[can't remember reference - some 90's book about multivariate statistics\], which allows up to 13 environmental predictors to fit to samples from 129 sites.

Models developed for the Spring 2018 data included effective imperviousness (EI), attenuated forest cover (AF), their interaction (EI\*AF), catchment area (CA), mean annual runoff (MeanQ), and the modal effect of runoff (MeanQ\^2). EI and AF are our two environmental predictors associated with anthropogenic land use change, and interactions between these variables may influence inferences of the main effects of these predictors. In the Spring 2018 data, we found that marginal interactions between EI and AF were rare for single-taxon responses, though the predictor was still found to improve predictions made by the model as a whole.

### Spring 2021 data - opportunities and challenges

In species-level models, AF was found to have a stronger effect than EI for more taxa than in the family-level models. The effects were also more varied within taxonomic groups, such as Leptoceridae and Oligochaeta. The riparian zone influences many structural aspects of a stream, such as channelisation and riffle habitat structure, and trophic aspects of a stream such as woody detritus inputs and suppression of oligotrophy [@poffLandscapeFiltersSpecies1997; @fierroEffectsLocalLanduse2017; @puseyImportanceRiparianZone2003]. The riparian zone has complex interactions with in-stream macroinvertebrates, and there is the potential to investigate this aspect further:

1.  Does the a modal response of forest cover improve prediction of macroinvertebrate taxon occurrences and assemblage responses?
2.  Do hydrographic predictors modulate the effects of forest cover on macroinvertebrate responses?
3.  Does riparian corridor distance influence macroinvertebrate occurrences?

As we observed in the Spring 2018 data, the responses of species to AF were more varied than the effects of EI. The model structure only considers positive or negative correlations with AF, though such a specification ignores pre-colonial variation in forest cover that species

### Interactions with EI

#### EI * MeanQ

The mechanistic basis of ecological degradation as caused by sealed impervious surfaces (which drain directly into an environmental stream) is that surfaces act as both sites for pollutant build-up and efficient channels for stormwater to transport the pollutants [e.g., Walsh et al 2005; Allan 2004]. Therefore, it is reasonable to expect some causal relationship between EI and MeanQ such that the effects of high EI might be made more deleterious by increased transport of pollutants through high rainfall runoff.

Question: Do invertebrate responses to EI differ between high and low MeanQ? 

#### EI * EV

Elevation could be useful as a proxy for mean annual air temperature [add citation]. We could use this relationship to infer the effects of land use change on alpine species, or more broadly, rising air temperature (such as climate change or urban heat island effects) on invertebrate occurrences. However, such inferences may also be confounded by a tendency for urban developments to be built on flat, low-elevation catchments, such as floodplains (e.g., southeast Melbourne) and basalt flats (e.g., western Melbourne).

Question: Do invertebrate responses to EI differ at low and high elevations?

### Interactions with AF

#### AF * MeanQ

The basis behind ecological degradation in response to forest cover loss is similar to that of imperviousness, as riparian and catchment vegetation maintain stream health by intercepting sediment and pollutant runoff [pusey et al., 2003]. However, treating 

#### AF * DoR

Given that most reservoirs will be 

#### AF * EV


 
#### AF * AF (Modal response)

By correlating species occurrences to environmental gradients, the relationships of species' responses to predictors are implied to be linear, optimising the response at either 0% or 100%. For EI, there is no ad hoc reason to believe such a relationship would be non-linear as impervious surfaces are a product of urban growth and would not have varied pre-colonisation. However, forest cover would likely have varied spatially pre-colonisation, and invertebrates may have preferences for streams within a range (e.g., a species with a positive response to AF may have an optimal response somewhere closer to 80%).

Question: Does the a modal response of forest cover improve prediction of macroinvertebrate taxon occurrences and assemblage responses?

#### Spatial autocorrelation

As the density of sites is much higher in the Spring 2021 data than the 2018 data, the effects of overland, downstream and upstream influences between sites are more likely to have an effect on macroinvertebrate assemblages. Spatial autocorrelation, the tendency for ecological communities to correlated depending on their spatial arrangements, is a metric that can be addressed in this dataset by addressing the following questions:

1.  Are assemblages influenced by their upstream communities?
2.  Are assemblages influenced by their downstream communities?
3.  Are assemblages influenced by overland spatial arrangements?

```{r}
#| label: data_assembly
#| eval: true
#| echo: true

# Open record of Spring 2021 samples source file.
field_s21 <- as.data.frame(
  readxl::read_excel("~/uomShare/wergData/DNA_Barcoding/DNA barcoding samples processing Spr2021.xlsx"),
  stringsAsfactors = FALSE)
#check nrows # nrow(field_s21) # 140

# Restrict to those sites from which 4 samples were taken.
field_s21 <- field_s21[field_s21$total == 4,]
#check nrows now # nrow(field_s21) # reduced to 129

# Sitecode mix-up in field_s21 (Confusion which site is correct: they are very close and can be considered equivalent I think)
field_s21$sitecode[field_s21$sitecode == "STV-2279-4"] <- "STV-3149-0"
# retain the original sample_code values for matching with the DNA data, and
# create a corrected sample_code field (smpcode) to match the database values
field_s21$orig_sample_code <- field_s21$sample_code
field_s21$smpcode <- gsub("STV-2279-4","STV-2279-5",field_s21$sample_code)

# Make a connection to the database and open the samples table
db_mwstr <- RPostgres::dbConnect(RPostgres::Postgres(), "mwstr", host = "localhost", port = 5432, user = "readonly", password = "reachcode_42")
db_mwbugs <- RPostgres::dbConnect(drv = RPostgres::Postgres(), dbname = "mwbugs", host = "localhost", port = 5432, user = "readonly", password = "reachcode_42")
samples <- DBI::dbReadTable(db_mwbugs, "samples")
# And reduce to spring 2021 (could have done this as an SQL query too, of course)
samples_s21 <- samples[samples$date > "2021-07-01" & samples$date < "2021-12-31",]
samples_s21$reach <- substr(samples_s21$sitecode,1,nchar(samples_s21$sitecode)-2)

# check that each site in field_s21 has a matching pair of samples in the database.
# find and correct sitecodes in the field_s21 table are reaches rather than sitecodes,
for(i in 1:nrow(field_s21)){
  # Note data for JKS-470-7 is missing from the database. I've asked Zac to check and resuppply
  if(field_s21$sitecode[i] %in% samples_s21$sitecode | field_s21$sitecode[i] == "JKS-470-7"){
    field_s21$reach[i] <- substr(samples$sitecode[i],1,nchar(samples$sitecode[i])-2)
  } else {
    if(field_s21$sitecode[i] %in% samples_s21$reach){
      field_s21$reach[i] <- field_s21$sitecode[i]
      field_s21$sitecode[i] <- unique(samples_s21$sitecode[samples_s21$reach == field_s21$sitecode[i]])
  } else {
    stop()  # I used this so that the loop would stop when it struck a mismatch
    # the STV and JKS corrections above were made as a result of this step.
  }
  }
}

sample_lookup <- field_s21[,c("smpcode","sitecode","Extraction name")]
names(sample_lookup)[3] <- "extract_code"

sites <- sf::st_read(db_mwbugs,"sites")
sites <- sites[sites$sitecode %in% sample_lookup$sitecode,]
# check number of rows # nrow(sites)  #129, which is the number of expected sites

samples <- samples[samples$sitecode %in% sample_lookup$sitecode,]
# check number of rows# nrow(samples)  #256, = 2 * 128 so two samples missing...
# sample_lookup$sitecode[!sample_lookup$sitecode %in% samples$sitecode] #"JKS-470-7"
# sample data not provided by GHD. Request has been sent to Zac....
# Proceed with 128 for now (and rerun this script when JKS data is delivered)

biota <- DBI::dbReadTable(db_mwbugs,"biota")
biota <- biota[biota$smpcode %in% samples$smpcode,]

# Read env and site data (CW edit over old version)
# db_mwstr <- RPostgres::dbConnect(drv = RPostgres::Postgres(), dbname = "mwstr")
sites_env <- DBI::dbGetQuery(db_mwstr, 
                             paste0("SELECT cat_env.site, cat_env.reach, cat_env.ei_2022, ",
                             "cat_env.af_2022, cat_env.meanq_mm, subcs.carea_km2, cat_env.dor, subc_env.elev_asl_m ",
                             "FROM cat_env JOIN subcs ON cat_env.site = subcs.site JOIN subc_env ON cat_env.site = subc_env.site ",
                             "WHERE cat_env.reach IN ('", paste(sites$reach_v12, collapse = "', '"), "');"))
names(sites_env) <- c("site","reach_v12","AI","AF_r","meanq","carea", "dor", "ev")

sites <- cbind(sites, sites_env[match(sites$reach_v12,sites_env$reach),-c(1,2)])

# Recalculate log10-transformed predictors
sites$lai <- log10(sites$AI*100 + 0.01)
sites$lmeanq <- log10(sites$meanq)
sites$lcarea <- log10(sites$carea)
sites$ldor <- log10(sites$dor) # not sure if appropriate, but it helps the spread of data

rm(sites_env)
sites1 <- sites

# Recalculate AF by site (rather than reach - see https://shiny-water.science.unimelb.edu.au/mwstr_manual/c6-trees.html for explanation and calculations)
sites$AF <- NA
af_data <- prepare_af_site_data(db_mwstr, "/servers/shiny-server/data/mwstr_v13") # takes ~ 2 min
system.time(
  for(i in 1:nrow(sites)){
  sites$AF[i] <- af_site(sites$reach_v12[i], af_data)[4]   # third element is af_2018
  }
) # ~ 17 mins

# disconnect databases:
DBI::dbDisconnect(db_mwstr)
DBI::dbDisconnect(db_mwbugs)

```

### Pairwise spread of predictor data

The spread of predictor data is well-distributed, with low collinearity between all predictors. The pair with the highest co-correlation was AF and MeanQ (R-sq = 0.38), which was still relatively low, and is a ecologically sensible pattern to encounter (i.e., high rainfall areas are typically not low in forest cover, and low rainfall areas are typically not high in forest cover). DoR was strongly skewed and may present leverage issues from a small number of extreme observations.

```{r}
#| label: fig-pred_correlations
#| eval: true
#| echo: false
#| warning: false
#| message: false
#| fig-width: 7
#| fig-height: 7
#| fig-cap: "Correlation pair plots of the study sites for log-transformed catchment area (lcarea), log-transformed mean annual discharge depth (lmeanq), log-transformed effective imperviousness (lei), attenuated forest cover (af), and log degree of regulation (dor)"

sites_pairs <- as.data.frame(sites[,c("lai", "AF", "lmeanq", "lcarea", "dor")])[,1:5]

panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...)
{
    usr <- par("usr"); on.exit(par(usr))
    par(usr = c(0, 1, 0, 1))
    r <- cor(x, y)^2
    txt <- format(c(r, 0.123456789), digits = digits)[1]
    txt <- paste0(prefix, txt)
    if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
    text(0.5, 0.5, txt, cex = cex.cor * r)
}

#sites_pairs
pairs(sites_pairs, upper.panel = panel.cor)

```

### Assemble 'biota' into dataset

```{r}
#| label: write_excel
#| eval: false
#| echo: true


WriteXLS::WriteXLS(list(sites = sites, 
                        samples = samples_s21,
                        biota_morph = biota),
                  paste0(wd,"biota_for_models.xlsx"))

```

### Model predictor sets from single-taxon responses (LME4)

```{r}
#| label: data_prep
#| echo: true

# NOTE THIS CHUNK is run below by sourcing its content at "compile_model_data.R"

# Import sites, samples, and biota tables as a list
data_list <- rio::import_list(paste0(wd,"biota_for_models.xlsx"))
# Convert each table in data_list into a data.frame.
list2env(data_list,globalenv())

# sort samples list by sitecode (for ease of indexing/checking)
samples <- samples[order(samples$sitecode),]
# assign site_nos to sitecodes, and match to sample table
sites$site_no <- 1:nrow(sites)
samples$site_no <- sites$site_no[match(samples$sitecode,sites$sitecode)]

# scale the predictor variables
# keeping them as scaled objects for ease of back-transforming later
I <- scale(sites$lai)
F <- scale(sites$AF)
Q <- scale(sites$lmeanq)
C <- scale(sites$lcarea)
D <- scale(sites$ldor)

#### samples table for morph samples 
samples_morph <- samples[samples$smpcode %in% unique(biota_morph$smpcode),]

#### predictor matrix u for morph samples
I_morph <- as.vector(I)[match(samples_morph$sitecode, sites$sitecode)]
F_morph <- as.vector(F)[match(samples_morph$sitecode, sites$sitecode)]
Q_morph <- as.vector(Q)[match(samples_morph$sitecode, sites$sitecode)]
C_morph <- as.vector(C)[match(samples_morph$sitecode, sites$sitecode)]
D_morph <- as.vector(D)[match(samples_morph$sitecode, sites$sitecode)]
hab <- as.numeric(samples_morph$collection_method == "RBA edge (sweep)") 
u_morph <- cbind(rep(1,nrow(samples_morph)),  # General intercept
           I_morph,                 # Effective imperviousness
           F_morph,                 # Attenuated Forest cover
           I_morph * F_morph,       # Interaction betwen I and F
           Q_morph,                 # mean annual runoff depth
           Q_morph^2,               # square of Q for modal response
           C_morph,                 # catchment area
           D_morph,                 # flow stress
           hab)                     # habitat (1 = edge, 0 = riffle)

#### count matrix for morph_ab model
# check all counts are integers sum(biota_morph_ab$count %% 1 > 0) # 0, all good
ab_morph <- with(biota_morph, ct(smpcode, taxoncode, count))
# ensure c and u rows are ordered the same way
ab_morph <- ab_morph[match(samples_morph$smpcode,row.names(ab_morph)),]

#### presence_absence matrix for morph samples 
pa_morph <- ab_morph
pa_morph[pa_morph > 0] <- 1

#### subsample fraction matrix (applies to both c_morph_ab and pa_morph)
s_morph <- pa_morph
for(i in 1:nrow(s_morph)){
  s_morph[i,] <- samples_morph$subsample_perc[samples_morph$smpcode == 
                                                row.names(s_morph)[i]]/100
}
# adjust coarsepick subsample fractions to 1
coarsepicks <- biota_morph[biota_morph$coarsepick == 1,]
for(i in 1:nrow(coarsepicks)){
  s_morph[row.names(s_morph) == coarsepicks$smpcode[i],
          coarsepicks$taxoncode[i]] <- 1
}

ab_morph_data <- list(n_obs = nrow(ab_morph), # no. samples
                    n_pred = ncol(u_morph),       # no. predictors
                    n_taxa = ncol(ab_morph),  # no. taxa
                    n_site = nrow(sites),       # no. sites
                    u = as.matrix(u_morph),       # predictor model matrix
                    c = as.matrix(ab_morph), # taxa pa matrix
                    s = as.matrix(s_morph),  # subsample proportion for each obs
                    site = samples_morph$site_no) # site number for each obs

pa_morph_data <- list(n_obs = nrow(pa_morph), # no. samples
                    n_pred = ncol(u_morph),       # no. predictors
                    n_taxa = ncol(pa_morph),  # no. taxa
                    n_site = nrow(sites),       # no. sites
                    u = as.matrix(u_morph),       # predictor model matrix
                    pa = as.matrix(pa_morph), # taxa pa matrix
                    s = as.matrix(s_morph),  # subsample proportion for each obs
                    site = samples_morph$site_no) # site number for each obs

# lme4:

taxoncodes <- colnames(ab_morph)
prevalence <- apply(ab_morph, 2, FUN = function(x) {sum(x > 1)})
prev_def <- data.frame(taxoncode = names(prevalence),
                       prevalence = prevalence)

# these seem incorrectly labeled, but not important now.

# QC340000 - 125/258
# QP030000 - 138/258
# QE060000 - 156/258




QC34_df <- data.frame(taxoncode = "QE060000",
                      smpcode = rownames(ab_morph)[match(rownames(ab_morph), samples_morph$smpcode)], 
                      abundance = round(ab_morph[match(rownames(ab_morph), samples_morph$smpcode),colnames(ab_morph) == "QC340000"]),
                      I = as.vector(I)[match(samples_morph$sitecode, sites$sitecode)],
                      F = as.vector(F)[match(samples_morph$sitecode, sites$sitecode)],
                      Q = as.vector(Q)[match(samples_morph$sitecode, sites$sitecode)],
                      C = as.vector(C)[match(samples_morph$sitecode, sites$sitecode)],
                      D = as.vector(D)[match(samples_morph$sitecode, sites$sitecode)],
                      site_no = sites$site_no[match(samples_morph$sitecode, sites$sitecode)])

QP03_df <- data.frame(taxoncode = "QP030000",
                      smpcode = rownames(ab_morph)[match(rownames(ab_morph), samples_morph$smpcode)], 
                      abundance = round(ab_morph[match(rownames(ab_morph), samples_morph$smpcode),colnames(ab_morph) == "QP030000"]),
                      I = as.vector(I)[match(samples_morph$sitecode, sites$sitecode)],
                      F = as.vector(F)[match(samples_morph$sitecode, sites$sitecode)],
                      Q = as.vector(Q)[match(samples_morph$sitecode, sites$sitecode)],
                      C = as.vector(C)[match(samples_morph$sitecode, sites$sitecode)],
                      D = as.vector(D)[match(samples_morph$sitecode, sites$sitecode)],
                      site_no = sites$site_no[match(samples_morph$sitecode, sites$sitecode)])

QE06_df <- data.frame(taxoncode = "QE060000",
                      smpcode = rownames(ab_morph)[match(rownames(ab_morph), samples_morph$smpcode)], 
                      abundance = round(ab_morph[match(rownames(ab_morph), samples_morph$smpcode),colnames(ab_morph) == "QE060000"]),
                      I = as.vector(I)[match(samples_morph$sitecode, sites$sitecode)],
                      F = as.vector(F)[match(samples_morph$sitecode, sites$sitecode)],
                      Q = as.vector(Q)[match(samples_morph$sitecode, sites$sitecode)],
                      C = as.vector(C)[match(samples_morph$sitecode, sites$sitecode)],
                      D = as.vector(D)[match(samples_morph$sitecode, sites$sitecode)],
                      site_no = sites$site_no[match(samples_morph$sitecode, sites$sitecode)])

lme_df <- rbind(QC34_df, QP03_df, QE06_df)

library(lme4)

QC34_lm <- glmer(formula = abundance ~ I + F + I*F + C + Q + Q^2 + D, data = QC34_df, family = poisson(link = "log"))
QP03_lm <- glmer(formula = abundance ~ I + F + I*F + C + Q + Q^2 + D + (1 | site_no), data = QP03_df, family = poisson(link = "log"))
QE06_lm <- glmer(formula = abundance ~ I + F + I*F + C + Q + Q^2 + D + (1 | site_no), data = QE06_df, family = poisson(link = "log"))

summary(QC34_lm)
summary(QP03_lm)
summary(QE06_lm)
```
